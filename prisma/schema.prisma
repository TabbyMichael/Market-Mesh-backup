// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(BUYER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  seller     Seller?
  orders     Order[]
  notifications Notification[]

  @@map("users")
}

model Seller {
  id               String   @id @default(cuid())
  userId           String   @unique
  storeName        String
  bio              String?
  payoutAccountId  String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  products Product[]

  @@map("sellers")
}

model Category {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  sellerId    String
  title       String
  description String?
  priceCents  Int
  currency    String   @default("USD")
  images      String[]
  stock       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  seller    Seller     @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  categories Category[]
  orderItems OrderItem[]

  @@map("products")
}

model Order {
  id         String      @id @default(cuid())
  buyerId    String
  totalCents Int
  status     OrderStatus @default(PENDING_PAYMENT)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Relations
  buyer User        @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id             String @id @default(cuid())
  orderId        String
  productId      String
  quantity       Int
  unitPriceCents Int
  subtotalCents  Int

  // Relations
  order  Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Notification {
  id        String             @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  read      Boolean            @default(false)
  createdAt DateTime           @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum Role {
  BUYER
  SELLER
  ADMIN
}

enum OrderStatus {
  PENDING_PAYMENT
  PAID
  FULFILLED
  CANCELLED
}

enum NotificationType {
  ORDER_CONFIRMATION
  ORDER_SHIPPED
  PAYMENT_RECEIVED
  NEW_MESSAGE
}
